# -*- coding: utf-8 -*-
import numpy as np
import cv2.cv2 as cv2
from numpy import float32

if __name__ == "__main__":
    # Read image
    img = cv2.imread("tag.png")
    a = np.array([[
        1.7912648e+03, 9.4628363e+02, 1.8775751e+03, 9.8001398e+02,
        9.9796140e-01
    ],
                  [
                      1.7920221e+03, 1.2503292e+03, 1.8801121e+03,
                      1.2833203e+03, 9.9866259e-01
                  ],
                  [
                      1.7914028e+03, 6.5410400e+02, 1.8794458e+03,
                      6.8468939e+02, 9.9665451e-01
                  ],
                  [
                      1.7906260e+03, 1.4230640e+03, 1.8794834e+03,
                      1.4549713e+03, 9.9774039e-01
                  ],
                  [
                      1.7585500e+03, 1.0507825e+03, 1.8913545e+03,
                      1.0907880e+03, 9.7778600e-01
                  ],
                  [
                      1.8080144e+03, 7.4835681e+02, 1.8914222e+03,
                      7.8243719e+02, 9.8916000e-01
                  ],
                  [
                      2.0333147e+03, 1.0502064e+03, 2.1674272e+03,
                      1.0866427e+03, 9.9202967e-01
                  ],
                  [
                      1.8081393e+03, 8.4014972e+02, 1.8911903e+03,
                      8.7698914e+02, 9.8575610e-01
                  ],
                  [
                      2.0468143e+03, 1.4209396e+03, 2.1549155e+03,
                      1.4572219e+03, 9.9546742e-01
                  ],
                  [
                      1.7917002e+03, 1.5279025e+03, 1.8791354e+03,
                      1.5588224e+03, 9.9591607e-01
                  ],
                  [
                      1.4805101e+03, 7.4732660e+02, 1.5629609e+03,
                      7.8340771e+02, 9.7010350e-01
                  ],
                  [
                      2.0493325e+03, 1.0997175e+03, 2.1575972e+03,
                      1.1327008e+03, 9.8562998e-01
                  ],
                  [
                      2.0475369e+03, 1.5263934e+03, 2.1541689e+03,
                      1.5589718e+03, 9.9490070e-01
                  ],
                  [
                      1.4806050e+03, 7.9353821e+02, 1.5609673e+03,
                      8.3041138e+02, 9.7306091e-01
                  ],
                  [
                      1.6464091e+02, 1.1420332e+03, 3.6660828e+02,
                      1.1786562e+03, 9.7761005e-01
                  ],
                  [
                      1.4843840e+03, 4.9674045e+02, 1.5511757e+03,
                      5.3402972e+02, 9.9404657e-01
                  ],
                  [
                      1.6363684e+02, 1.0469934e+03, 5.6871301e+02,
                      1.1343889e+03, 5.3118950e-01
                  ],
                  [
                      2.0843921e+03, 8.4090369e+02, 2.1661143e+03,
                      8.7730536e+02, 9.9053687e-01
                  ],
                  [
                      1.6970322e+02, 8.3968011e+02, 4.3602420e+02,
                      8.7731317e+02, 9.7629195e-01
                  ],
                  [
                      2.0204012e+03, 4.5457242e+02, 2.1532869e+03,
                      5.3054810e+02, 9.9399525e-01
                  ],
                  [
                      1.8261962e+03, 7.9468256e+02, 1.8912633e+03,
                      8.3037061e+02, 9.8462427e-01
                  ],
                  [
                      2.0333706e+03, 9.4463300e+02, 2.1668811e+03,
                      9.8016479e+02, 9.9224454e-01
                  ],
                  [
                      1.6421581e+02, 6.5088550e+02, 4.6562854e+02,
                      6.8647388e+02, 9.9018681e-01
                  ],
                  [
                      1.4768175e+03, 6.5339069e+02, 1.5629296e+03,
                      6.9299799e+02, 8.1002378e-01
                  ],
                  [
                      2.0134612e+02, 1.4176166e+03, 4.3477914e+02,
                      1.4539401e+03, 9.0474427e-01
                  ],
                  [
                      1.6980367e+02, 7.4565509e+02, 5.4230048e+02,
                      7.8146704e+02, 9.9070519e-01
                  ],
                  [
                      1.7089994e+03, 4.5271692e+02, 1.8824657e+03,
                      5.3232123e+02, 9.9652928e-01
                  ],
                  [
                      1.6640511e+02, 6.9860706e+02, 5.7406079e+02,
                      7.3374030e+02, 9.8224801e-01
                  ],
                  [
                      1.8921954e+02, 1.2469664e+03, 5.3487860e+02,
                      1.2846626e+03, 9.8558331e-01
                  ],
                  [
                      1.7488039e+02, 7.9348523e+02, 5.3927521e+02,
                      8.2838171e+02, 9.8440015e-01
                  ],
                  [
                      1.7729879e+03, 1.0986442e+03, 1.8791162e+03,
                      1.1317566e+03, 9.4840884e-01
                  ],
                  [
                      1.7888011e+02, 1.3709152e+03, 5.1837268e+02,
                      1.4518203e+03, 3.0103168e-01
                  ],
                  [
                      1.6570580e+02, 6.0383112e+02, 5.4090875e+02,
                      6.4128760e+02, 9.7428334e-01
                  ],
                  [
                      1.6971289e+02, 1.0915890e+03, 5.3991431e+02,
                      1.1337791e+03, 8.7862831e-01
                  ],
                  [
                      1.4798063e+03, 6.5567596e+02, 1.5621829e+03,
                      7.3351978e+02, 4.8233503e-01
                  ],
                  [
                      2.0311553e+03, 7.0046210e+02, 2.1669487e+03,
                      7.3537927e+02, 9.9101794e-01
                  ],
                  [
                      1.5924667e+02, 6.0298993e+02, 5.5753400e+02,
                      6.8759656e+02, 9.3518049e-02
                  ],
                  [
                      1.4957626e+03, 6.9658405e+02, 1.5477742e+03,
                      7.3291296e+02, 6.7607355e-01
                  ],
                  [
                      2.1019224e+03, 1.1442687e+03, 2.1565430e+03,
                      1.1787839e+03, 9.6972960e-01
                  ],
                  [
                      1.4287992e+03, 3.0151606e+03, 1.5491777e+03,
                      3.1064963e+03, 7.5554930e-02
                  ],
                  [
                      2.0482656e+03, 1.2516840e+03, 2.1551035e+03,
                      1.2835331e+03, 9.9409395e-01
                  ],
                  [
                      1.6901877e+02, 1.3716750e+03, 5.2628760e+02,
                      1.4098655e+03, 9.2422664e-01
                  ],
                  [
                      1.6093411e+03, 2.9567671e+03, 1.8265579e+03,
                      3.1210554e+03, 8.7042701e-01
                  ],
                  [
                      1.5878441e+02, 9.4165076e+02, 6.8440320e+02,
                      9.7900513e+02, 9.7349304e-01
                  ],
                  [
                      1.4381871e+03, 2.6754465e+03, 1.5766063e+03,
                      3.1371272e+03, 1.6625351e-01
                  ],
                  [
                      1.6263997e+03, 2.7626338e+03, 1.8278226e+03,
                      3.1441575e+03, 5.4596532e-02
                  ],
                  [
                      9.8651459e+02, 2.7401868e+03, 1.2123350e+03,
                      3.1452585e+03, 1.1410659e-01
                  ],
                  [
                      1.8926207e+03, 2.9740542e+03, 2.0601753e+03,
                      3.1036426e+03, 2.7166083e-01
                  ],
                  [
                      1.4296978e+03, 2.9015376e+03, 1.5572245e+03,
                      3.1231855e+03, 1.0023104e-01
                  ],
                  [
                      1.7612864e+03, 1.0514576e+03, 1.8874323e+03,
                      1.1339045e+03, 3.0044270e-01
                  ],
                  [
                      1.4799828e+03, 7.0183008e+02, 1.5659015e+03,
                      8.3313171e+02, 2.5492248e-01
                  ],
                  [
                      9.7505713e+02, 2.9447441e+03, 1.2117316e+03,
                      3.1255393e+03, 1.9732957e-01
                  ],
                  [
                      1.6900964e+02, 1.0509663e+03, 5.7769775e+02,
                      1.0928776e+03, 1.2511203e-01
                  ],
                  [
                      1.8093191e+03, 7.4672656e+02, 1.8942045e+03,
                      8.7992657e+02, 1.3112924e-01
                  ],
                  [
                      1.5569980e+02, 5.9366077e+02, 5.5230884e+02,
                      8.4666180e+02, 5.1332645e-02
                  ]],
                 dtype=float32)
    b = np.array([[
        1.5182907e+02, 4.4325674e+02, 2.1696304e+03, 1.5716042e+03,
        9.9502641e-01
    ],
                  [
                      7.3979016e+02, 2.6153564e+03, 2.0809319e+03,
                      3.1490200e+03, 3.7132040e-01
                  ]],
                 dtype=float32)
    # Draw rectangle
    j = 0
    for i in a:
        if i[4] > 0.7:
            cv2.rectangle(img, (int(i[0]), int(i[1])), (int(i[2]), int(i[3])),
                          (50, 205, 50), 4)
            # cut = img[int(i[0]):int(i[2]), int(i[1]):int(i[3])]
            # cv2.imwrite('./pic/' + str(j) + '.png', cut)
            # j += 1
    for i in b:
        if i[4] > 0.7:
            cv2.rectangle(img, (int(i[0]), int(i[1])), (int(i[2]), int(i[3])),
                          (254, 67, 101), 4)
    # Display cropped image
    width = int(img.shape[1] / 4)
    height = int(img.shape[0] / 4)
    dim = (width, height)
    # resize image
    resized = cv2.resize(img, dim)

    # save the image
    cv2.imshow("Image", resized)
    cv2.waitKey(0)

    cv2.imwrite('./tag_.png', img)
